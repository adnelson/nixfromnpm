#!/usr/bin/env node
// These packages come packaged with nodejs.
var fs = require('fs');
var url = require('url');

function versionSpecIsImpure(versionSpec) {
  // Returns true if a version spec is impure.
  return (versionSpec == "latest" || versionSpec == "unstable" ||
          // file path references
          versionSpec.substr(0, 2) == ".." ||
          versionSpec.substr(0, 2) == "./" ||
          versionSpec.substr(0, 2) == "~/" ||
          versionSpec.substr(0, 1) == '/' ||
          // github owner/repo references
          /^[^/]+\/[^/]+(#.*)?$/.test(versionSpec) ||
          // is a URL
          url.parse(versionSpec).protocol);
}

// Load up the package object.
var packageObj = JSON.parse(fs.readFileSync('./package.json'));

// Purify dependencies.
var depTypes = ['dependencies', 'devDependencies', 'optionalDependencies',
                'peerDependencies'];
for (var i in depTypes) {
  var depType = depTypes[i];
  var depSet = packageObj[depType];
  if (depSet !== undefined) {
    for (var depName in depSet) {
      var versionSpec = depSet[depName];
      if (versionSpecIsImpure(versionSpec)) {
        console.log("Replacing impure version spec " + versionSpec +
                    " for dependency " + depName + " with '*'");
        depSet[depName] = '*';
      }
    }
  }
}

// Remove any recursive dependencies if they exist.
if (process.env.circularDependencies) {
  var circularDependencies = process.env.circularDependencies.split(" ");
  for (var i in circularDependencies) {
    var dep = circularDependencies[i];
    if (packageObj.dependencies[dep] != null) {
      delete packageObj.dependencies[dep];
    }
    if (packageObj.devDependencies[dep] != null) {
      delete packageObj.devDependencies[dep];
    }
    if (packageObj.peerDependencies[dep] != null) {
      delete packageObj.peerDependencies[dep];
    }
    if (packageObj.optionalDependencies[dep] != null) {
      delete packageObj.optionalDependencies[dep];
    }
  }
}


/* Patch dependencies as set by the patchDependencies variable */
var patches = JSON.parse(process.env.patchDependencies || "{}");
if (Object.keys(patches).length > 0) {
  console.log("Applying patches from patchDependencies argument...");
  var errors = false;
  // Iterate through all of the dependencies we're patching, and for
  // each one either remove it or set it to something else.
  for (var depName in patches) {
    var version = patches[depName];
    var found = false;
    for (var i in depTypes) {
      var depType = depTypes[i];
      if (packageObj[depType] && packageObj[depType][depName] != null) {
        found = true;
        var bound = packageObj[depType][depName];
        console.log("Found " + depName + "@" + bound + " in " + depType + ". " +
                    (version === null ? "Removing"
                                      : ("Setting to version " + version)));
        if (version === null) delete packageObj[depType][depName];
        else packageObj[depType][depName] = version;
      }
    }
    if (!found) {
      console.log("Can't patch dependency " + depName + " for package " +
                  packageObj.name + "@" + packageObj.version + ", because " +
                  "it's not listed as a dependency.");
      errors = true;
    }
  }
  if (errors) process.exit(1);
}

/* Write the fixed JSON file */
fs.writeFileSync("package.json", JSON.stringify(packageObj));
